---
title: "In-class Exercise 4"
author: "Jeffrey Lee Shao Lin"
date: "Sep 16 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  messsage: false
  freeze: true
---

# 1. Loading the package

In this in-class exercise, sf, spdep, tmap, tidyverse, knitr and GWmodel will be used.

Using the step you leanred from previous hands-in, install and load the necessary R packages in R environment.

```{r}
pacman::p_load(sf, ggstatsplot, tmap, tidyverse, knitr, GWmodel)
```


# 2.Preparing the Data

For this in-class exercise, Hunan shapefile and Hunan_2012 data file will be used.

-   import Hunan shapefile and parse it into a sf polygon feature object.

-   import Hunan_2012.csv file parse it into a tibble data.frame.

-   join Hunan and Hunan_2012 data.frames.

## 2.1 Importing Hunan shapefile

```{r}

hunan_sf <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")

```

## 2.2 Importing Hunan_2012 table

```{r}

hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")

```

## 2.3 Joining Hunan and Hunan_2012

```{r}

hunan_sf <- left_join(hunan_sf, hunan2012) %>%
  select(1:3, 7, 15, 16, 31, 32)

```


# 3.  Mapping GDPPC

Using the steps we learned from Hands-on Exercise 5, prepare a choropleth map showing the geographic distribution of GDPPC of Hunan Province.

```{r}
#| eval: false
basemap <- tm_shape(hunan_sf) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan_sf, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)

```

# 4. Converting to SpatialPolygonDataFrame

::: {.callout-note}
GWmodel presently is built around the older sp and not sf formats for handling spatial data in R.
:::

```{r}
hunan_sp <- hunan_sf %>%
  as_Spatial()
  
```

# 5. Geographically Weighted Summary Statistics with adaptive bandwidth

## 5.1 Determine adaptive bandwidth

::: panel-tabset
## Cross-validation

```{r}
bw_CV <- bw.gwr(GDPPC ~ 1, 
             data = hunan_sp,
             approach = "CV",
             adaptive = TRUE, 
             kernel = "bisquare", 
             longlat = T)
  
```

```{r}
bw_CV
  
```

## AIC

```{r}
bw_AIC <- bw.gwr(GDPPC ~ 1, 
             data = hunan_sp,
             approach ="AIC",
             adaptive = TRUE, 
             kernel = "bisquare", 
             longlat = T)
```

```{r}
bw_AIC
  
```
:::

## 5.2 Computing geographically wieghted summary statistics

```{r}
gwstat <- gwss(data = hunan_sp,
               vars = "GDPPC",
               bw = bw_AIC,
               kernel = "bisquare",
               adaptive = TRUE,
               longlat = T)
  
```

## 5.3 Preparing the output data

Code chunk below is used to extract **SDF** data table from **gwss** object output from `gwss()`. It will be converted into data.frame by using `as.data.frame()`.

```{r}
gwstat_df <- as.data.frame(gwstat$SDF)
  
```

Next, `cbind()` is used to append the newly derived data.frame onto *hunan_sf* sf data.frame.

```{r}
hunan_gstat <- cbind(hunan_sf, gwstat_df)
  
```

# 6.  Visualising geographically weighted summary statistics

The Geographically Weighted Mean

```{r}
#| eval: false
tm_shape(hunan_gstat) +
  tm_fill("GDPPC_LM",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Distribution of geographically wieghted mean",
            main.title.position = "center",
            main.title.size = 2.0,
            legend.text.size = 1.2,
            legend.height = 1.50, 
            legend.width = 1.50,
            frame = TRUE)
  
```

# 7. Geographically Weighted Summary Statistics with fixed

## 7.1 Determine fixed bandwidth

::: panel-tabset
## Cross-validation

```{r}
bw_CV <- bw.gwr(GDPPC ~ 1, 
             data = hunan_sp,
             approach = "CV",
             adaptive = FALSE, 
             kernel = "bisquare", 
             longlat = T)

```

```{r}
bw_CV
  
```

## AIC

```{r}
bw_AIC <- bw.gwr(GDPPC ~ 1, 
             data = hunan_sp,
             approach ="AIC",
             adaptive = FALSE, 
             kernel = "bisquare", 
             longlat = T)
  
```

```{r}
bw_AIC
  
```
:::

## 7.2 Computing adaptive bandwidth

```{r}
gwstat <- gwss(data = hunan_sp,
               vars = "GDPPC",
               bw = bw_AIC,
               kernel = "bisquare",
               adaptive = FALSE,
               longlat = T)
  
```

## 7.3 Preparing the output data

Code chunk below is used to extract **SDF** data table from **gwss** object output from `gwss()`. It will be converted into data.frame by using `as.data.frame()`.

```{r}
gwstat_df <- as.data.frame(gwstat$SDF)
  
```

Next, `cbind()` is used to append the newly derived data.frame onto *hunan_sf* sf data.frame.

```{r}
hunan_gstat <- cbind(hunan_sf, gwstat_df)
  
```

## 7.4 Visualising geographically weighted summary statistics

### The Geographically Weighted Mean

```{r}
#| eval: false
tm_shape(hunan_gstat) +
  tm_fill("GDPPC_LM",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Distribution of geographically wieghted mean",
            main.title.position = "center",
            main.title.size = 2.0,
            legend.text.size = 1.2,
            legend.height = 1.50, 
            legend.width = 1.50,
            frame = TRUE)
```

# 8.Geographically Weighted Correlation with Adaptive Bandwidth

Business question: Is there any relationship between GDP per capita and Gross Industry Output?

## 8.1 Conventional statistical solution

```{r}
#| eval: false
ggscatterstats(
  data = hunan2012, 
  x = Agri, 
  y = GDPPC,
  xlab = "Gross Agriculture Output", ## label for the x-axis
  ylab = "GDP per capita", 
  label.var = County, 
  label.expression = Agri > 10000 & GDPPC > 50000, 
  point.label.args = list(alpha = 0.7, size = 4, color = "grey50"),
  xfill = "#CC79A7", 
  yfill = "#009E73", 
  title = "Relationship between GDP PC and Gross Agriculture Output")
```


## 8.2 Geospatial analytics solution

::: panel-tabset
## Determine the bandwidth

```{r}
bw <- bw.gwr(GDPPC ~ GIO, 
             data = hunan_sp, 
             approach = "AICc", 
             adaptive = TRUE)
```

## Computing gwCorrelation

```{r}
gwstats <- gwss(hunan_sp, 
                vars = c("GDPPC", "GIO"), 
                bw = bw,
                kernel = "bisquare",
                adaptive = TRUE, 
                longlat = T)
```

## Extracting the result

Code chunk below is used to extract **SDF** data table from **gwss** object output from `gwss()`. It will be converted into data.frame by using `as.data.frame()`.

```{r}
gwstat_df <- as.data.frame(gwstats$SDF) %>%
  select(c(12,13)) %>%
  rename(gwCorr = Corr_GDPPC.GIO,
         gwSpearman = Spearman_rho_GDPPC.GIO)
```

Next, cbind() is used to append the newly derived data.frame onto hunan_sf sf data.frame.

```{r}
hunan_Corr <- cbind(hunan_sf, gwstat_df)
```
:::

# 9. Visualising Local Correlation

## 9.1 Local Correlation Coefficient

```{r}
#| eval: false
tm_shape(hunan_Corr) +
  tm_fill("gwCorr",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Local Correlation Coefficient",
            main.title.position = "center",
            main.title.size = 2.0,
            legend.text.size = 1.2,
            legend.height = 1.50, 
            legend.width = 1.50,
            frame = TRUE)
```

## 9.2 Local Spearman Coefficient

```{r}
#| eval: false
tm_shape(hunan_Corr) +
  tm_fill("gwSpearman",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Local Spearman Coefficient",
            main.title.position = "center",
            main.title.size = 2.0,
            legend.text.size = 1.2,
            legend.height = 1.50, 
            legend.width = 1.50,
            frame = TRUE)
```
