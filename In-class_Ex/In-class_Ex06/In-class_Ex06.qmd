---
title: "In-class Ex 6: Emerging Hot Spot Analysis"
author: "Jeffrey Lee Shao Lin"
date: "September 30, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
  warning: false
---
# Getting Started

# Installing and Loading the R Packages

As usual, p_load () of pacman packages will be used to check if the necessary packages have been installed in R, if yes, load the packages on R environment.

Five R packages are need for this in-class exercise, they are: sf, sfdep, tmap, ploty, and tidyverse.
```{r}
pacman::p_load(sf, sfdep, tmap, plotly, tidyverse)
```

```{r}
hunan <- st_read(dsn = "data/geospatial", layer = "Hunan")
```

```{r}
GDPPC <-read_csv("data/aspatial/Hunan_GDPPC.csv")
```
# Creating a Time Series Cube

Before getting started, we must read this article to learn the basic concerpt of spatio-temporal cube and its implementation in sfdep package.

```{r}
GDPPC_st <- spacetime(GDPPC, hunan,
                      .loc_col = "County", #space indicator
                      .time_col = "Year") #time indicator
```

Next, is_spacetime_cube() of sfdep package will be used to verify if GDPPC_st is indeed an space-time cube object.

```{r}
is_spacetime_cube(GDPPC_st)
```

The TRUE return confirms that GDPPC_st object is indeed an time-space cube.

# Computing Gi*

```{r}
GDPPC_nb <- GDPPC_st %>% 
  activate("geometry") %>% # activate the geometry context
  mutate(nb = include_self( #mutate to create two new columns nb and wt, include itself
    st_contiguity(geometry)),
    wt = st_inverse_distance(nb,
                             geometry,
                             scale = 1,
                             alpha = 1),
    .before = 1) %>% #new derived variable in front of the table
  set_nbs("nb") %>% 
  set_wts("wt")
```

local_gstar_pem

```{r}
gi_stars <- GDPPC_nb %>% 
  group_by(Year) %>% 
  mutate(gi_star = local_gstar_perm(
    GDPPC, nb, wt)) %>% 
  tidyr::unnest(gi_star)
```

Mann-Kendall Test of GI

```{r}
cbg <- gi_stars %>% 
  ungroup () %>% 
  filter(County == "Changsha") |>
  select(County, Year, gi_star)
```

Next, we plot the result by using ggplot2 functions
```{r}
ggplot(data = cbg,
       aes(x = Year,
           y = gi_star)) +
  geom_line() +
  theme_light()
```

Interactive Mann-Kendall Plot
```{r}
p <- ggplot(data = cbg,
            aes(x = Year,
                y = gi_star))+
  geom_line()+
  theme_light()

ggplotly(p)
```

Printing Mann-Kendall test report
```{r}
cbg %>% 
  summarise(mk = list(
    unclass(
      Kendall::MannKendall(gi_star)))) %>% 
  tidyr::unnest_wider(mk)
```

In the above result, sl is the p-value. With reference to the results, we will reject the hypothesis null and infer that a slight upward trend.

# Mann-Kendall test data.frame

```{r}
ehsa <- gi_stars %>% 
  group_by(County) %>% 
  summarise(mk = list(
    unclass(
      Kendall::MannKendall(gi_star)))) %>% 
  tidyr::unnest_wider(mk)
head(ehsa)
```

```{r}
emerging <- ehsa %>% 
  arrange(s1,abs(tau)) %>% 
  slice(1:10)
head(emerging)

```

# Performing Emerging Hotspot Analysis

```{r}
ehsa <- emerging_hotspot_analysis(
  x = GDPPC_st,
  .var = "GDPPC",
  k = 1,
  nsim = 99
)
```


```{r}
hunan_ehsa <- hunan %>% 
  left_join(ehsa,
            by = join_by(County == location))
```

```{r}
ehsa_sig <- hunan_ehsa %>%
  filter(p_value < 0.05)
tmap_mode("plot")
tm_shape(hunan_ehsa) +
  tm_polygons()+
  tm_borders(alpha = 0.5) +
tm_shape(ehsa_sig)+
  tm_fill("classification")+
  tm_borders(alpha = 0.4)
```

