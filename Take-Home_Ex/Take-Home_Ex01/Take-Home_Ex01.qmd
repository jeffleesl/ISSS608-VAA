---
title: "Take Home Exercise 1 : Geospatial Analytics for Public Good"
author: "Jeffrey Lee Shao Lin"
date: "September 7, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
  warning: false
---

# 1. Background

Thailand’s roads are the deadliest in Southeast Asia and among the worst in the world, according to the World Health Organisation. About 20,000 people die in road accidents each year, or about 56 deaths a day (WHO).

Between 2014 and 2021, Thailand experienced a notable increase in accident frequencies. Specifically, 19% of all accidents in Thailand occurred on the national highways, which constituted the primary public thoroughfares connecting various regions, provinces, districts, and significant locations within a comprehensive network. Within the broader context of accidents across the country, there existed a considerable 66% likelihood of encountering accident-prone zones, often termed ‘black spots,’ distributed as follows: 66% on straight road segments, 13% at curves, 6% at median points of cross-shaped intersections, 5% at T-shaped intersections and Y-shaped intersections, 3% at cross-shaped intersections, 2% on bridges, and 2% on steep slopes, respectively.

# 2. Objectives of the Exercise

By and large, road traffic accidents can be attributed by two major factors, namely: behavioural and environmental factors. Behavioural factors in driving are considered to be major causes of traffic accidents either in direct or indirect manner (Lewin, 1982). These factors can be further grouped into two as, ***driver behavior*** (also called driver/driving style) and ***driver performance***, in other words, driver/driving skills (Elander, West, & French, 1993). Environmental factors, on the other hand, includes but not limited to weather condition such as poor visibility during heavy rain or foggy and road conditions such as sharp bend road, slippery slope road, and [blind spot](https://en.wikipedia.org/wiki/Vehicle_blind_spot).

Previous studies have demonstrated the significant potential of Spatial Point Patterns Analysis (SPPA) in exploring and identifying factors influencing road traffic accidents. However, these studies often focus solely on either behavioral or environmental factors, with limited consideration of temporal factors such as season, day of the week, or time of day.

In view of this, you are tasked to discover factors affecting road traffic accidents in the [Bangkok Metropolitan Region BMR](https://en.wikipedia.org/wiki/Bangkok_Metropolitan_Region) by employing both spatial spatio-temporal point patterns analysis methods.

The specific objectives of this take-home exercise are as follows:

-   To visualize the spatio-temporal dynamics of road traffic accidents in BMR using appropriate statistical graphics and geovisualization methods.

-   To conduct detailed spatial analysis of road traffic accidents using appropriate Network Spatial Point Patterns Analysis methods.

-   To conduct detailed spatio-temporal analysis of road traffic accidents using appropriate Temporal Network Spatial Point Patterns Analysis methods.

# 3. The Data

For the purpose of this exercise, three basic data sets must be used, they are:

-   [Thailand Road Accident \[2019-2022\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022) on Kaggle.

-   [Thailand Roads (OpenStreetMap Export)](https://data.humdata.org/dataset/hotosm_tha_roads) on HDX.

-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) on HDX.

# 4. Installing and Loading the R packages

In this hands-on exercise, five R packages will be used, they are:

-   [**sf**](https://r-spatial.github.io/sf/), a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.

-   [**spatstat**](https://spatstat.org/), which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.

-   [**maptools**](https://cran.r-project.org/web/packages/maptools/index.html) which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert *Spatial* objects into *ppp* format of **spatstat**.

-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html) which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.

-   [spNetwork](https://cran.r-project.org/web/packages/spNetwork/index.html), which provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It also can be used to build spatial matrices (‘listw’ objects like in ‘spdep’ package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances.

-   [**sparr**](https://tilmandavies.github.io/sparr/index.html) provides functions to estimate fixed and adaptive kernel-smoothed spatial relative risk surfaces via the density-ratio method and perform subsequent inference. Fixed-bandwidth spatiotemporal density and relative risk estimation is also supported

Use the code chunk below to install and launch the five R packages.

```{r}
pacman::p_load(sf, sparr, spatstat, tmap, spNetwork, tidyverse)
set.seed(1234)
```

# 5. Data Import and Preparation

## 5.1 Thailand Road Accident (2019 -2022)

```{r}
rdacc <- read_csv("data/rawdata/thai_road_accident_2019_2022.csv") %>%
  filter(!is.na(longitude) & longitude != "",
         !is.na(latitude) & latitude != "") %>%
  mutate(Month_num = month(incident_datetime)) %>% 
  mutate(Month_fac = month(incident_datetime,
                       label = TRUE,
                       abbr = TRUE)) %>% 
  mutate(dayofweek = day(incident_datetime)) %>% 
  st_as_sf(coords = c("longitude", "latitude"),crs=4326) %>%
  st_transform(crs = 32647)
```

```{r}
#| eval: false
head(rdacc)

```

We will filer the province and zoom into the road traffic accidents in the Bangkok Metropolitan Region BMR (Bangkok, Nonthaburi, Nakhon Pathom,Pathum Thani, Samut Prakan, Samut Sakhon) .

```{r}
# Filter for BMR region
rdacc_bmr <- rdacc %>% 
            filter(province_en %in% c("Bangkok", "Nonthaburi", "Nakhon Pathom", 
                            "Pathum Thani", "Samut Prakan", "Samut Sakhon"))
head(rdacc_bmr)
```

```{r}
plot(rdacc_bmr)

```

## 5.2 Thailand Roads (OpenStreetMap Export)

```{r}
hotosm <- st_read(dsn = "data/rawdata", 
                layer = "hotosm_tha_roads_lines_shp")
```

```{r}
# Check if hotosm has assigned any CRS
st_crs(hotosm)

# If CRS is missing, assign the correct CRS (assuming it's in WGS84, EPSG:4326)
if (is.na(st_crs(hotosm))) {
  hotosm <- st_set_crs(hotosm, 4326)  # Set CRS to WGS84 if missing
}

# Now transform to UTM Zone 47N (EPSG:32647)
hotosm <- st_transform(hotosm, crs = 32647)

# Check if transformation was successful
st_crs(hotosm)
```

```{r}

unique(hotosm$highway)

```

```{r}
hotosm_road_types <- hotosm %>% 
  filter(highway %in% c("motorway", "motorway_link", "primary", "primary_link", 
                            "secondary", "secondary_link", "tertiary" , "tertiary_link"))
glimpse(hotosm_road_types)
```

## 5.3 Thailand - Subnational Administrative Boundaries

```{r}
# thaadm0 <- st_read(dsn = "data/rawdata", 
                #layer = "tha_admbnda_adm0_rtsd_20220121") %>%
  # st_transform(crs = 32647)
  ## No BMR information

thaadm1 <- st_read(dsn = "data/rawdata", 
                layer = "tha_admbnda_adm1_rtsd_20220121") %>%
  st_transform(crs = 32647)

tsab_bmr <- thaadm1 %>%
  filter(ADM1_EN %in% c("Bangkok", "Nonthaburi", "Nakhon Pathom", 
                            "Pathum Thani", "Samut Prakan", "Samut Sakhon"))

# thaadm2 <- st_read(dsn = "data/rawdata", 
                #layer = "tha_admbnda_adm2_rtsd_20220121") %>%
  # st_transform(crs = 32647) %>%
                #filter(ADM2_EN %in% c("Bangkok", "Nonthaburi", "Nakhon Pathom", 
                                    #"Pathum Thani", "Samut Prakan", "Samut Sakhon"))
                                    ## No BMR information

# thaadm3 <- st_read(dsn = "data/rawdata", 
               # layer = "tha_admbnda_adm3_rtsd_20220121") %>%
 # st_transform(crs = 32647) %>%
 # filter(ADM3_EN %in% c("Bangkok", "Nonthaburi", "Nakhon Pathom", 
                          #  "Pathum Thani", "Samut Prakan", "Samut Sakhon"))
                          ## No BMR information

# thaadmall <- st_read(dsn = "data/rawdata", 
              #  layer = "tha_admbndl_admALL_rtsd_itos_20220121") %>%
  # st_transform(crs = 32647)
  ## No BMR information

# thaadmlu <- st_read(dsn = "data/rawdata", 
                # layer = "tha_admbndt_adminUnitLookup")
                ## No BMR information
```

```{r}
plot(tsab_bmr)
```

```{r}
BMR <- st_transform(tsab_bmr, crs = st_crs(hotosm_road_types))

road_bmr <-st_intersection(hotosm_road_types, BMR)

plot(st_geometry(road_bmr))
```

```{r}
road_owin <- as.owin(tsab_bmr)

road_owin

class(road_owin)
```

# 6. Geospatial Analysis

## 6.1 Spatial Point Pattern Analysis

Analyze the distribution of road accidents in BMR. This includes calculating point densities, identifying accident hotspots (black spots), and testing for spatial clustering.

```{r}

# Bounding box from the BMR region (create a spatial window)
bmr_window <- as.owin(st_bbox(rdacc_bmr))

# Extract coordinates of the road accidents for point pattern analysis
coords_accidents <- st_coordinates(rdacc_bmr)

# Create ppp object
ppp_accidents <- ppp(x = coords_accidents[,1], 
                     y = coords_accidents[,2], 
                     window = bmr_window)

# Plot the point pattern
plot(ppp_accidents, main = "Road Traffic Accidents in BMR")

```

### 6.1.1 Using a Kernel Density Estimation (KDE) to identify high-risk areas.

The code chunk below is used to identify high-risk areas.

```{r}

# Kernel density estimation
accident_density <- density(ppp_accidents, sigma = 1000)  # Adjust sigma for smoothing

# Plot density map
plot(accident_density, main = "Accident Density in BMR")

```

### 6.1.2 Adding provinces to the Kernel Density Estimation (KDE) to identify high-risk areas.

The previous plot did not allow us to identify the provinces clearly. In the code chunk below, we are able to determine that Bangkok is one of the areas with the highest accident risk, while Nakhon Pathom has one of the lowest accident rates.

```{r}

# Kernel density estimation
accident_density <- density(ppp_accidents, sigma = 1000)  # Adjust sigma for smoothing

# Plot density map
plot(accident_density, main = "Accident Density in BMR")

# Overlay province boundaries on the density plot
plot(st_geometry(tsab_bmr), add = TRUE, border = "lightsalmon", lwd = 2)

# Add province names at the centroid of each province polygon
centroids <- st_centroid(tsab_bmr)  # Get centroids of provinces

# Loop over each province to add labels
text(st_coordinates(centroids), labels = tsab_bmr$ADM1_EN, cex = 0.8, col = "snow")

```

### 6.1.3 Base Map with Accident Points

```{r}

# Snap accident points to the nearest road
tm_shape(tsab_bmr) + 
  tm_polygons() +  # Administrative boundaries of BMR
  tm_shape(hotosm_road_types) + 
  tm_lines(col = "aquamarine4") +  # Road network (in aquarmine4)
  tm_layout(main.title = "Road Network in Bangkok Metropolitan Region",
            legend.outside = TRUE)

```

# 7. Visualize accidents with the road network and administrative boundaries

```{r}

tm_shape(tsab_bmr) + 
  tm_polygons() + 
  tm_shape(hotosm_road_types) + 
  tm_lines(col = "grey") + 
  tm_shape(rdacc_bmr) + 
  tm_dots(size = 0.05, col = "tomato1") +
  tm_layout(main.title = "Road Traffic Accidents in BMR")

```

# 8.Visualize how accidents vary across month using time-based color coding or heatmaps.

```{r}
# Map accidents by the month

tm_shape(tsab_bmr) + 
  tm_polygons() + 
  tm_shape(hotosm_road_types) + 
  tm_lines(col = "firebrick1") + 
  tm_shape(rdacc_bmr) + 
  tm_dots(size = 0.05, col = "Month_num", palette = "viridis") +
  tm_layout(main.title = "Accidents by Month in BMR")

```

# 9. Visualizing geographic distribution of car accident by month

```{r}
# Map accidents by the month

tm_shape(tsab_bmr) + 
  tm_polygons() + 
  tm_shape(rdacc_bmr) + 
  tm_dots(size = 0.05) +
  tm_facets(by="Month_fac", 
            free.coords=FALSE, 
            drop.units = TRUE)
  tm_layout(main.title = "Accidents by Month in BMR")

```

# 9.1 Computing STKDE by Month

## 9.1. Extracting road accident by Month

```{r}
rdacc_month <- rdacc_bmr %>% 
  select(Month_num)
```

## 9.2 Creating ppp

```{r}
rdacc_month_ppp <- as.ppp(rdacc_month)
rdacc_month_ppp
```

## 9.3 Check

The code chunk below is used to check the output is in the correct object class.

```{r}
summary(rdacc_month_ppp)
```

Next, we will check if there are duplicated point events by using the code chunk below.

```{r}
any(duplicated(rdacc_month_ppp))
```

We have identified duplicates. To count the number of co-indicence point, we will use the multiplicity() function as shown in the code chunk below.

```{r}
sum(multiplicity(rdacc_month_ppp)>1)

```

## 9.4 Solution

We will use jittering, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.

```{r}
rdacc_month_ppp_jit <- rjitter(rdacc_month_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
```

Check if any duplicated point in this geospatial data.

```{r}
any(duplicated(rdacc_month_ppp_jit))
```

Including Owin object

The code chunk below is used to combine origin_am_ppp and am_owin objects into one.

```{r}
rdacc_month_owin <- rdacc_month_ppp_jit[road_owin]
summary(rdacc_month_owin)
```

As a good practice, plot() is used to plot ff_owin so that we can examine the correctness of the output object.

```{r}
plot(rdacc_month_owin)
```

```{r}
st_kde <- spattemp.density(rdacc_month_owin)
summary(st_kde)
```

## 10. Behavioral factors and Environmental factors

```{r}

# Checking unique values in the presumed_cause column
unique(rdacc_bmr$presumed_cause)

# Filter behavioral factors
behavioral_factors <- rdacc_bmr %>%
  filter(presumed_cause %in% c("abrupt lane change", "agressive driving/overtaking", "driving in the wrong lane", "driving under the influence of alcohol", "driving without headlights/illumination", "failure to signal enter/exit parking", "failure to yield right of way", "failure to yield/signal", "falling asleep", "ignoring stop sign while leaving intersection", "illegal overtaking", "inadequate visibility", "internal disturbance", "loss of control", "medical condition", "overloaded vehicle", "speeding", "sudden stop", "tailgating", "running red lights/traffic signals", "unfamilarity with the route/unskilled driving", "using mobile phone while driving", "using psychoactive substances"))

speeding_accidents <- rdacc_bmr %>%
  filter(presumed_cause == "speeding")
```

```{r}
# Checking unique values in the weather_condition and slope_description column
unique(rdacc_bmr$weather_condition)

```

```{r}
# Filter environmental factors (weather conditions and slope)
environmental_factors <- rdacc_bmr %>%
  filter(weather_condition %in% c("dark", "foggy", "landslide", "natural disaster", "rainy"))

rainy_accidents <- rdacc_bmr %>%
  filter(weather_condition == "rainy")
```

```{r}

# Map accidents by BNehavioral factors (e.g., speeding)
tm_shape(tsab_bmr) +
  tm_polygons() +
  tm_shape(behavioral_factors) +
  tm_dots(size = 0.01, col = "firebrick2") + 
  tm_layout(title = "Behavioral Factor")

# Map accidents by Environmental factors
tm_shape(tsab_bmr) +
  tm_polygons() +
  tm_shape(environmental_factors) +
  tm_dots(size = 0.01, col = "royalblue4") + 
  tm_layout(title = "Environmental Factor")

# Map accidents by Speeding
tm_shape(tsab_bmr) +
  tm_polygons() +
  tm_shape(speeding_accidents) +
  tm_dots(size = 0.01, col = "coral") + 
  tm_layout(title = "Behavioral Factor: Speeding Accidents")

# Map accidents by Rainy conditions
tm_shape(tsab_bmr) +
  tm_polygons() +
  tm_shape(rainy_accidents) +
  tm_dots(size = 0.01, col = "chartreuse4") + 
  tm_layout(title = "Environmental Factor: Rainy Condition Accidents")

```

```{r}

# Combined map for environmental and behavioral factors
tm_shape(tsab_bmr) +
  tm_polygons() +
  tm_shape(environmental_factors) +
  tm_dots(size = 0.01, col = "royalblue4", title = "Environmental Factors") + 
  tm_shape(behavioral_factors) +
  tm_dots(size = 0.01, col = "firebrick2", title = "Behavioral Factors") +
  tm_shape(speeding_accidents) +
  tm_dots(size = 0.01, col = "coral", title =  "Speeding Accidents") + 
  tm_shape(rainy_accidents) +
  tm_dots(size = 0.01, col = "chartreuse4", title =  "Rainy Condition Accidents") + 
  tm_layout(title = "Environmental vs Behavioral Factors in Car Accidents")

```

Contingency Table A contingency table will show how often both types of factors occur together.

```{r}

# Create a combined dataset with both environmental and behavioral factors
combined_factors <- rdacc_bmr %>%
  mutate(is_behavioral = presumed_cause %in% c("speeding", "abrupt lane change", "agressive driving/overtaking", 
                                               "driving in the wrong lane", "driving under the influence of alcohol", 
                                               "driving without headlights/illumination", "failure to signal enter/exit parking", 
                                               "failure to yield right of way", "failure to yield/signal", 
                                               "falling asleep", "ignoring stop sign while leaving intersection", 
                                               "illegal overtaking", "inadequate visibility", "internal disturbance", 
                                               "loss of control", "medical condition", "overloaded vehicle", 
                                               "speeding", "sudden stop", "tailgating", "running red lights/traffic signals", 
                                               "unfamilarity with the route/unskilled driving", 
                                               "using mobile phone while driving", "using psychoactive substances"),
         is_environmental = weather_condition %in% c("dark", "foggy", "landslide", "natural disaster", "rainy") |
                            slope_description == "slope area" |
                            road_description == "sharp curve")

# Create a contingency table
table(combined_factors$is_behavioral, combined_factors$is_environmental)

```

Output is saved in rds format for future used.

```{r}
write_rds(rdacc_bmr,"data/rds/acc.rds")
```

The code chunk below will be used to import the save origin6_9.rds into R environment.

```{r}
acc <- read_rds("data/rds/acc.rds")
```

