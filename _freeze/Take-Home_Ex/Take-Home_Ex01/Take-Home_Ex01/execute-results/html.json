{
  "hash": "9d228af8fad45be2d9b17aac25411614",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take Home Exercise 1 : Geospatial Analytics for Public Good\"\nauthor: \"Jeffrey Lee Shao Lin\"\ndate: \"September 7, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n  warning: false\n---\n\n\n# 1. Background\n\nThailand’s roads are the deadliest in Southeast Asia and among the worst in the world, according to the World Health Organisation. About 20,000 people die in road accidents each year, or about 56 deaths a day (WHO).\n\nBetween 2014 and 2021, Thailand experienced a notable increase in accident frequencies. Specifically, 19% of all accidents in Thailand occurred on the national highways, which constituted the primary public thoroughfares connecting various regions, provinces, districts, and significant locations within a comprehensive network. Within the broader context of accidents across the country, there existed a considerable 66% likelihood of encountering accident-prone zones, often termed ‘black spots,’ distributed as follows: 66% on straight road segments, 13% at curves, 6% at median points of cross-shaped intersections, 5% at T-shaped intersections and Y-shaped intersections, 3% at cross-shaped intersections, 2% on bridges, and 2% on steep slopes, respectively.\n\n# 2. Objectives of the Exercise\n\nBy and large, road traffic accidents can be attributed by two major factors, namely: behavioural and environmental factors. Behavioural factors in driving are considered to be major causes of traffic accidents either in direct or indirect manner (Lewin, 1982). These factors can be further grouped into two as, ***driver behavior*** (also called driver/driving style) and ***driver performance***, in other words, driver/driving skills (Elander, West, & French, 1993). Environmental factors, on the other hand, includes but not limited to weather condition such as poor visibility during heavy rain or foggy and road conditions such as sharp bend road, slippery slope road, and [blind spot](https://en.wikipedia.org/wiki/Vehicle_blind_spot).\n\nPrevious studies have demonstrated the significant potential of Spatial Point Patterns Analysis (SPPA) in exploring and identifying factors influencing road traffic accidents. However, these studies often focus solely on either behavioral or environmental factors, with limited consideration of temporal factors such as season, day of the week, or time of day.\n\nIn view of this, you are tasked to discover factors affecting road traffic accidents in the [Bangkok Metropolitan Region BMR](https://en.wikipedia.org/wiki/Bangkok_Metropolitan_Region) by employing both spatial spatio-temporal point patterns analysis methods.\n\nThe specific objectives of this take-home exercise are as follows:\n\n-   To visualize the spatio-temporal dynamics of road traffic accidents in BMR using appropriate statistical graphics and geovisualization methods.\n\n-   To conduct detailed spatial analysis of road traffic accidents using appropriate Network Spatial Point Patterns Analysis methods.\n\n-   To conduct detailed spatio-temporal analysis of road traffic accidents using appropriate Temporal Network Spatial Point Patterns Analysis methods.\n\n# 3. The Data\n\nFor the purpose of this exercise, three basic data sets must be used, they are:\n\n-   [Thailand Road Accident \\[2019-2022\\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022) on Kaggle.\n\n-   [Thailand Roads (OpenStreetMap Export)](https://data.humdata.org/dataset/hotosm_tha_roads) on HDX.\n\n-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) on HDX.\n\n# 4. Installing and Loading the R packages\n\nIn this hands-on exercise, five R packages will be used, they are:\n\n-   [**sf**](https://r-spatial.github.io/sf/), a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.\n\n-   [**spatstat**](https://spatstat.org/), which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.\n\n-   [**maptools**](https://cran.r-project.org/web/packages/maptools/index.html) which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert *Spatial* objects into *ppp* format of **spatstat**.\n\n-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html) which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.\n\n-   [spNetwork](https://cran.r-project.org/web/packages/spNetwork/index.html), which provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It also can be used to build spatial matrices (‘listw’ objects like in ‘spdep’ package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances.\n\n-   [**sparr**](https://tilmandavies.github.io/sparr/index.html) provides functions to estimate fixed and adaptive kernel-smoothed spatial relative risk surfaces via the density-ratio method and perform subsequent inference. Fixed-bandwidth spatiotemporal density and relative risk estimation is also supported\n\nUse the code chunk below to install and launch the five R packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, sparr, spatstat, tmap, spNetwork, tidyverse)\nset.seed(1234)\n```\n:::\n\n\n# 5. Data Import and Preparation\n\n## 5.1 Thailand Road Accident (2019 -2022)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc <- read_csv(\"data/rawdata/thai_road_accident_2019_2022.csv\") %>%\n  filter(!is.na(longitude) & longitude != \"\",\n         !is.na(latitude) & latitude != \"\") %>%\n  mutate(Month_num = month(incident_datetime)) %>% \n  mutate(Month_fac = month(incident_datetime,\n                       label = TRUE,\n                       abbr = TRUE)) %>% \n  mutate(dayofweek = day(incident_datetime)) %>% \n  st_as_sf(coords = c(\"longitude\", \"latitude\"),crs=4326) %>%\n  st_transform(crs = 32647)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(rdacc)\n```\n:::\n\n\nWe will filer the province and zoom into the road traffic accidents in the Bangkok Metropolitan Region BMR (Bangkok, Nonthaburi, Nakhon Pathom,Pathum Thani, Samut Prakan, Samut Sakhon) .\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter for BMR region\nrdacc_bmr <- rdacc %>% \n            filter(province_en %in% c(\"Bangkok\", \"Nonthaburi\", \"Nakhon Pathom\", \n                            \"Pathum Thani\", \"Samut Prakan\", \"Samut Sakhon\"))\nhead(rdacc_bmr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 19 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 627012.3 ymin: 1502876 xmax: 693488.9 ymax: 1533381\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 6 × 20\n  acc_code incident_datetime   report_datetime     province_th  province_en  \n     <dbl> <dttm>              <dttm>              <chr>        <chr>        \n1   571882 2019-01-01 02:25:00 2019-01-02 17:32:00 นครปฐม       Nakhon Pathom\n2   600001 2019-01-01 03:00:00 2019-01-05 10:33:00 นนทบุรี        Nonthaburi   \n3   605043 2019-01-01 03:00:00 2019-03-29 08:22:00 สมุทรปราการ   Samut Prakan \n4   629691 2019-01-01 03:05:00 2019-01-01 03:05:00 กรุงเทพมหานคร Bangkok      \n5   571887 2019-01-01 04:30:00 2019-01-02 17:32:00 นครปฐม       Nakhon Pathom\n6   599234 2019-01-01 04:45:00 2019-01-02 08:28:00 สมุทรปราการ   Samut Prakan \n# ℹ 15 more variables: agency <chr>, route <chr>, vehicle_type <chr>,\n#   presumed_cause <chr>, accident_type <chr>,\n#   number_of_vehicles_involved <dbl>, number_of_fatalities <dbl>,\n#   number_of_injuries <dbl>, weather_condition <chr>, road_description <chr>,\n#   slope_description <chr>, Month_num <dbl>, Month_fac <ord>, dayofweek <int>,\n#   geometry <POINT [m]>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(rdacc_bmr)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## 5.2 Thailand Roads (OpenStreetMap Export)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhotosm <- st_read(dsn = \"data/rawdata\", \n                layer = \"hotosm_tha_roads_lines_shp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `hotosm_tha_roads_lines_shp' from data source \n  `C:\\Users\\user\\OneDrive - Singapore Management University\\MITB\\6. Geospatial Analytics and Applications\\jeffleesl\\ISSS626-GAA\\Take-Home_Ex\\Take-Home_Ex01\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2792590 features and 14 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 97.34457 ymin: 5.643645 xmax: 105.6528 ymax: 20.47168\nCRS:           NA\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check if hotosm has assigned any CRS\nst_crs(hotosm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System: NA\n```\n\n\n:::\n\n```{.r .cell-code}\n# If CRS is missing, assign the correct CRS (assuming it's in WGS84, EPSG:4326)\nif (is.na(st_crs(hotosm))) {\n  hotosm <- st_set_crs(hotosm, 4326)  # Set CRS to WGS84 if missing\n}\n\n# Now transform to UTM Zone 47N (EPSG:32647)\nhotosm <- st_transform(hotosm, crs = 32647)\n\n# Check if transformation was successful\nst_crs(hotosm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(hotosm$highway)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"secondary\"      \"residential\"    \"secondary_link\" \"service\"       \n [5] \"tertiary\"       \"path\"           \"footway\"        \"track\"         \n [9] \"unclassified\"   \"trunk\"          \"trunk_link\"     \"primary\"       \n[13] \"primary_link\"   \"steps\"          \"motorway_link\"  \"cycleway\"      \n[17] \"pedestrian\"     \"tertiary_link\"  \"motorway\"       \"construction\"  \n[21] \"road\"           \"raceway\"        \"corridor\"       \"living_street\" \n[25] \"escape\"         \"proposed\"       \"busway\"         \"bridleway\"     \n[29] \"abandoned\"      \"parth\"          \"barrier\"        \"paved\"         \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhotosm_road_types <- hotosm %>% \n  filter(highway %in% c(\"motorway\", \"motorway_link\", \"primary\", \"primary_link\", \n                            \"secondary\", \"secondary_link\", \"tertiary\" , \"tertiary_link\"))\nglimpse(hotosm_road_types)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 93,863\nColumns: 15\n$ name       <chr> \"ถนนฉลองกรุง\", NA, \"ถนนฉลองกรุง\", \"ถนนเอราวัณ 1\", NA, \"ถนนลำลูก…\n$ name_en    <chr> \"Chalong Krung Road\", NA, \"Chalong Krung Road\", \"Erawan 1 R…\n$ highway    <chr> \"secondary\", \"secondary_link\", \"secondary\", \"tertiary\", \"te…\n$ surface    <chr> \"paved\", NA, \"concrete\", NA, NA, NA, \"asphalt\", \"asphalt\", …\n$ smoothness <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ width      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ lanes      <chr> NA, NA, \"2\", NA, NA, \"3\", NA, NA, \"3\", \"3\", \"3\", NA, NA, NA…\n$ oneway     <chr> \"yes\", \"yes\", \"yes\", NA, NA, \"yes\", \"yes\", \"yes\", \"yes\", \"y…\n$ bridge     <chr> NA, NA, \"yes\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ layer      <chr> NA, NA, \"1\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ source     <chr> NA, NA, \"Bing\", NA, NA, NA, NA, NA, NA, NA, NA, \"DOH RoadNe…\n$ name_th    <chr> \"ถนนฉลองกรุง\", NA, \"ถนนฉลองกรุง\", \"ถนนเอราวัณ 1\", NA, \"ถนนลำลูก…\n$ osm_id     <dbl> 1125681229, 472283206, 116847248, 378672881, 347141451, 131…\n$ osm_type   <chr> \"ways_line\", \"ways_line\", \"ways_line\", \"ways_line\", \"ways_l…\n$ geometry   <MULTILINESTRING [m]> MULTILINESTRING ((693686.1 ..., MULTILINEST…\n```\n\n\n:::\n:::\n\n\n## 5.3 Thailand - Subnational Administrative Boundaries\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# thaadm0 <- st_read(dsn = \"data/rawdata\", \n                #layer = \"tha_admbnda_adm0_rtsd_20220121\") %>%\n  # st_transform(crs = 32647)\n  ## No BMR information\n\nthaadm1 <- st_read(dsn = \"data/rawdata\", \n                layer = \"tha_admbnda_adm1_rtsd_20220121\") %>%\n  st_transform(crs = 32647)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\Users\\user\\OneDrive - Singapore Management University\\MITB\\6. Geospatial Analytics and Applications\\jeffleesl\\ISSS626-GAA\\Take-Home_Ex\\Take-Home_Ex01\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\ntsab_bmr <- thaadm1 %>%\n  filter(ADM1_EN %in% c(\"Bangkok\", \"Nonthaburi\", \"Nakhon Pathom\", \n                            \"Pathum Thani\", \"Samut Prakan\", \"Samut Sakhon\"))\n\n# thaadm2 <- st_read(dsn = \"data/rawdata\", \n                #layer = \"tha_admbnda_adm2_rtsd_20220121\") %>%\n  # st_transform(crs = 32647) %>%\n                #filter(ADM2_EN %in% c(\"Bangkok\", \"Nonthaburi\", \"Nakhon Pathom\", \n                                    #\"Pathum Thani\", \"Samut Prakan\", \"Samut Sakhon\"))\n                                    ## No BMR information\n\n# thaadm3 <- st_read(dsn = \"data/rawdata\", \n               # layer = \"tha_admbnda_adm3_rtsd_20220121\") %>%\n # st_transform(crs = 32647) %>%\n # filter(ADM3_EN %in% c(\"Bangkok\", \"Nonthaburi\", \"Nakhon Pathom\", \n                          #  \"Pathum Thani\", \"Samut Prakan\", \"Samut Sakhon\"))\n                          ## No BMR information\n\n# thaadmall <- st_read(dsn = \"data/rawdata\", \n              #  layer = \"tha_admbndl_admALL_rtsd_itos_20220121\") %>%\n  # st_transform(crs = 32647)\n  ## No BMR information\n\n# thaadmlu <- st_read(dsn = \"data/rawdata\", \n                # layer = \"tha_admbndt_adminUnitLookup\")\n                ## No BMR information\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(tsab_bmr)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nBMR <- st_transform(tsab_bmr, crs = st_crs(hotosm_road_types))\n\nroad_bmr <-st_intersection(hotosm_road_types, BMR)\n\nplot(st_geometry(road_bmr))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nroad_owin <- as.owin(tsab_bmr)\n\nroad_owin\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nwindow: polygonal boundary\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(road_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"owin\"\n```\n\n\n:::\n:::\n\n\n# 6. Geospatial Analysis\n\n## 6.1 Spatial Point Pattern Analysis\n\nAnalyze the distribution of road accidents in BMR. This includes calculating point densities, identifying accident hotspots (black spots), and testing for spatial clustering.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Bounding box from the BMR region (create a spatial window)\nbmr_window <- as.owin(st_bbox(rdacc_bmr))\n\n# Extract coordinates of the road accidents for point pattern analysis\ncoords_accidents <- st_coordinates(rdacc_bmr)\n\n# Create ppp object\nppp_accidents <- ppp(x = coords_accidents[,1], \n                     y = coords_accidents[,2], \n                     window = bmr_window)\n\n# Plot the point pattern\nplot(ppp_accidents, main = \"Road Traffic Accidents in BMR\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n### 6.1.1 Using a Kernel Density Estimation (KDE) to identify high-risk areas.\n\nThe code chunk below is used to identify high-risk areas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Kernel density estimation\naccident_density <- density(ppp_accidents, sigma = 1000)  # Adjust sigma for smoothing\n\n# Plot density map\nplot(accident_density, main = \"Accident Density in BMR\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n### 6.1.2 Adding provinces to the Kernel Density Estimation (KDE) to identify high-risk areas.\n\nThe previous plot did not allow us to identify the provinces clearly. In the code chunk below, we are able to determine that Bangkok is one of the areas with the highest accident risk, while Nakhon Pathom has one of the lowest accident rates.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Kernel density estimation\naccident_density <- density(ppp_accidents, sigma = 1000)  # Adjust sigma for smoothing\n\n# Plot density map\nplot(accident_density, main = \"Accident Density in BMR\")\n\n# Overlay province boundaries on the density plot\nplot(st_geometry(tsab_bmr), add = TRUE, border = \"lightsalmon\", lwd = 2)\n\n# Add province names at the centroid of each province polygon\ncentroids <- st_centroid(tsab_bmr)  # Get centroids of provinces\n\n# Loop over each province to add labels\ntext(st_coordinates(centroids), labels = tsab_bmr$ADM1_EN, cex = 0.8, col = \"snow\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n### 6.1.3 Base Map with Accident Points\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Snap accident points to the nearest road\ntm_shape(tsab_bmr) + \n  tm_polygons() +  # Administrative boundaries of BMR\n  tm_shape(hotosm_road_types) + \n  tm_lines(col = \"aquamarine4\") +  # Road network (in aquarmine4)\n  tm_layout(main.title = \"Road Network in Bangkok Metropolitan Region\",\n            legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n# 7. Visualize accidents with the road network and administrative boundaries\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(tsab_bmr) + \n  tm_polygons() + \n  tm_shape(hotosm_road_types) + \n  tm_lines(col = \"grey\") + \n  tm_shape(rdacc_bmr) + \n  tm_dots(size = 0.05, col = \"tomato1\") +\n  tm_layout(main.title = \"Road Traffic Accidents in BMR\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n# 8.Visualize how accidents vary across month using time-based color coding or heatmaps.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Map accidents by the month\n\ntm_shape(tsab_bmr) + \n  tm_polygons() + \n  tm_shape(hotosm_road_types) + \n  tm_lines(col = \"firebrick1\") + \n  tm_shape(rdacc_bmr) + \n  tm_dots(size = 0.05, col = \"Month_num\", palette = \"viridis\") +\n  tm_layout(main.title = \"Accidents by Month in BMR\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n# 9. Visualizing geographic distribution of car accident by month\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Map accidents by the month\n\ntm_shape(tsab_bmr) + \n  tm_polygons() + \n  tm_shape(rdacc_bmr) + \n  tm_dots(size = 0.05) +\n  tm_facets(by=\"Month_fac\", \n            free.coords=FALSE, \n            drop.units = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n\n```{.r .cell-code}\n  tm_layout(main.title = \"Accidents by Month in BMR\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$tm_layout\n$tm_layout$main.title\n[1] \"Accidents by Month in BMR\"\n\n$tm_layout$style\n[1] NA\n\n\nattr(,\"class\")\n[1] \"tm\"\n```\n\n\n:::\n:::\n\n\n# 9.1 Computing STKDE by Month\n\n## 9.1. Extracting road accident by Month\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_month <- rdacc_bmr %>% \n  select(Month_num)\n```\n:::\n\n\n## 9.2 Creating ppp\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_month_ppp <- as.ppp(rdacc_month)\nrdacc_month_ppp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern: 12986 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n```\n\n\n:::\n:::\n\n\n## 9.3 Check\n\nThe code chunk below is used to check the output is in the correct object class.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(rdacc_month_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  12986 points\nAverage intensity 1.218049e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   4.000   7.000   6.666  10.000  12.000 \n\nWindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n                    (118900 x 89670 units)\nWindow area = 10661300000 square units\n```\n\n\n:::\n:::\n\n\nNext, we will check if there are duplicated point events by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(rdacc_month_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\nWe have identified duplicates. To count the number of co-indicence point, we will use the multiplicity() function as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(multiplicity(rdacc_month_ppp)>1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 639\n```\n\n\n:::\n:::\n\n\n## 9.4 Solution\n\nWe will use jittering, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_month_ppp_jit <- rjitter(rdacc_month_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n```\n:::\n\n\nCheck if any duplicated point in this geospatial data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(rdacc_month_ppp_jit))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\nIncluding Owin object\n\nThe code chunk below is used to combine origin_am_ppp and am_owin objects into one.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_month_owin <- rdacc_month_ppp_jit[road_owin]\nsummary(rdacc_month_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  12979 points\nAverage intensity 1.6924e-06 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   4.000   7.000   6.667  10.000  12.000 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n                     (124500 x 94660 units)\nWindow area = 7668990000 square units\nFraction of frame area: 0.65\n```\n\n\n:::\n:::\n\n\nAs a good practice, plot() is used to plot ff_owin so that we can examine the correctness of the output object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(rdacc_month_owin)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_kde <- spattemp.density(rdacc_month_owin)\nsummary(st_kde)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 4255.367 (spatial)\n  lambda = 0.0114 (temporal)\n\nNo. of observations\n  12979 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [587893.5, 712440.5] x [1484414, 1579076]\n\nTemporal bound\n  [1, 12]\n\nEvaluation\n  128 x 128 x 12 trivariate lattice\n  Density range: [4.83487e-18, 6.233343e-09]\n```\n\n\n:::\n:::\n\n\n## 10. Behavioral factors and Environmental factors\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Checking unique values in the presumed_cause column\nunique(rdacc_bmr$presumed_cause)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"speeding\"                                      \n [2] \"running red lights/traffic signals\"            \n [3] \"other\"                                         \n [4] \"driving under the influence of alcohol\"        \n [5] \"cutting in closely by people/vehicles/animals\" \n [6] \"vehicle equipment failure\"                     \n [7] \"falling asleep\"                                \n [8] \"illegal overtaking\"                            \n [9] \"tailgating\"                                    \n[10] \"failure to yield/signal\"                       \n[11] \"abrupt lane change\"                            \n[12] \"debris/obstruction on the road\"                \n[13] \"driving in the wrong lane\"                     \n[14] \"failure to signal enter/exit parking\"          \n[15] \"failure to yield right of way\"                 \n[16] \"unfamiliarity with the route/unskilled driving\"\n[17] \"dangerous curve\"                               \n[18] \"medical condition\"                             \n[19] \"sudden stop\"                                   \n[20] \"worn-out/tire blowout\"                         \n[21] \"disabled vehicle without proper signals/signs\" \n[22] \"overloaded vehicle\"                            \n[23] \"reversing vehicle\"                             \n[24] \"straddling lanes\"                              \n[25] \"insufficient light\"                            \n[26] \"vehicle electrical system failure\"             \n[27] \"road in poor condition\"                        \n[28] \"disabled vehicle without proper signals\"       \n[29] \"slippery road\"                                 \n[30] \"obstruction in sight\"                          \n[31] \"using mobile phone while driving\"              \n[32] \"ignoring stop sign while leaving intersection\" \n[33] \"brake/anti-lock brake system failure\"          \n[34] \"no traffic signs\"                              \n[35] \"repair/construction on the road\"               \n[36] \"no presumed cause related to driver\"           \n[37] \"no road divider lines\"                         \n[38] \"inadequate visibility\"                         \n[39] \"using psychoactive substances\"                 \n[40] \"loss of control\"                               \n```\n\n\n:::\n\n```{.r .cell-code}\n# Filter behavioral factors\nbehavioral_factors <- rdacc_bmr %>%\n  filter(presumed_cause %in% c(\"abrupt lane change\", \"agressive driving/overtaking\", \"driving in the wrong lane\", \"driving under the influence of alcohol\", \"driving without headlights/illumination\", \"failure to signal enter/exit parking\", \"failure to yield right of way\", \"failure to yield/signal\", \"falling asleep\", \"ignoring stop sign while leaving intersection\", \"illegal overtaking\", \"inadequate visibility\", \"internal disturbance\", \"loss of control\", \"medical condition\", \"overloaded vehicle\", \"speeding\", \"sudden stop\", \"tailgating\", \"running red lights/traffic signals\", \"unfamilarity with the route/unskilled driving\", \"using mobile phone while driving\", \"using psychoactive substances\"))\n\nspeeding_accidents <- rdacc_bmr %>%\n  filter(presumed_cause == \"speeding\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Checking unique values in the weather_condition and slope_description column\nunique(rdacc_bmr$weather_condition)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"clear\"            \"other\"            \"rainy\"            \"dark\"            \n[5] \"land slide\"       \"foggy\"            \"natural disaster\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter environmental factors (weather conditions and slope)\nenvironmental_factors <- rdacc_bmr %>%\n  filter(weather_condition %in% c(\"dark\", \"foggy\", \"landslide\", \"natural disaster\", \"rainy\"))\n\nrainy_accidents <- rdacc_bmr %>%\n  filter(weather_condition == \"rainy\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Map accidents by BNehavioral factors (e.g., speeding)\ntm_shape(tsab_bmr) +\n  tm_polygons() +\n  tm_shape(behavioral_factors) +\n  tm_dots(size = 0.01, col = \"firebrick2\") + \n  tm_layout(title = \"Behavioral Factor\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Map accidents by Environmental factors\ntm_shape(tsab_bmr) +\n  tm_polygons() +\n  tm_shape(environmental_factors) +\n  tm_dots(size = 0.01, col = \"royalblue4\") + \n  tm_layout(title = \"Environmental Factor\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-34-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# Map accidents by Speeding\ntm_shape(tsab_bmr) +\n  tm_polygons() +\n  tm_shape(speeding_accidents) +\n  tm_dots(size = 0.01, col = \"coral\") + \n  tm_layout(title = \"Behavioral Factor: Speeding Accidents\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-34-3.png){width=672}\n:::\n\n```{.r .cell-code}\n# Map accidents by Rainy conditions\ntm_shape(tsab_bmr) +\n  tm_polygons() +\n  tm_shape(rainy_accidents) +\n  tm_dots(size = 0.01, col = \"chartreuse4\") + \n  tm_layout(title = \"Environmental Factor: Rainy Condition Accidents\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-34-4.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combined map for environmental and behavioral factors\ntm_shape(tsab_bmr) +\n  tm_polygons() +\n  tm_shape(environmental_factors) +\n  tm_dots(size = 0.01, col = \"royalblue4\", title = \"Environmental Factors\") + \n  tm_shape(behavioral_factors) +\n  tm_dots(size = 0.01, col = \"firebrick2\", title = \"Behavioral Factors\") +\n  tm_layout(title = \"Environmental vs Behavioral Factors in Car Accidents\") +\n  tm_shape(speeding_accidents) +\n  tm_dots(size = 0.01, col = \"coral\") + \n  tm_layout(title = \"Behavioral Factor: Speeding Accidents\") +\n  tm_shape(rainy_accidents) +\n  tm_dots(size = 0.01, col = \"chartreuse4\") + \n  tm_layout(title = \"Environmental Factor: Rainy Condition Accidents\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex01_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\nContingency Table A contingency table will show how often both types of factors occur together.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a combined dataset with both environmental and behavioral factors\ncombined_factors <- rdacc_bmr %>%\n  mutate(is_behavioral = presumed_cause %in% c(\"speeding\", \"abrupt lane change\", \"agressive driving/overtaking\", \n                                               \"driving in the wrong lane\", \"driving under the influence of alcohol\", \n                                               \"driving without headlights/illumination\", \"failure to signal enter/exit parking\", \n                                               \"failure to yield right of way\", \"failure to yield/signal\", \n                                               \"falling asleep\", \"ignoring stop sign while leaving intersection\", \n                                               \"illegal overtaking\", \"inadequate visibility\", \"internal disturbance\", \n                                               \"loss of control\", \"medical condition\", \"overloaded vehicle\", \n                                               \"speeding\", \"sudden stop\", \"tailgating\", \"running red lights/traffic signals\", \n                                               \"unfamilarity with the route/unskilled driving\", \n                                               \"using mobile phone while driving\", \"using psychoactive substances\"),\n         is_environmental = weather_condition %in% c(\"dark\", \"foggy\", \"landslide\", \"natural disaster\", \"rainy\") |\n                            slope_description == \"slope area\" |\n                            road_description == \"sharp curve\")\n\n# Create a contingency table\ntable(combined_factors$is_behavioral, combined_factors$is_environmental)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       \n        FALSE TRUE\n  FALSE  1949  156\n  TRUE   9596 1285\n```\n\n\n:::\n:::\n\n\nOutput is saved in rds format for future used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(rdacc_bmr,\"data/rds/acc.rds\")\n```\n:::\n\n\nThe code chunk below will be used to import the save origin6_9.rds into R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc <- read_rds(\"data/rds/acc.rds\")\n```\n:::\n",
    "supporting": [
      "Take-Home_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}